package com.pvpraids.raid.packet;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.pvpraids.core.utils.message.CC;
import com.pvpraids.raid.RaidPlugin;
import io.netty.buffer.ByteBuf;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.bukkit.entity.Player;

public class ExploitBlocker {
	private static final List<String> BLOCKED_CHANNELS = Arrays.asList("MC|BSign", "MC|BEdit");
	private static final int MAX_CAPACITY = 30000;
	private final List<UUID> kicked = new ArrayList<>();
	private final Map<UUID, Integer> packetsPerSecond = new HashMap<>();

	public ExploitBlocker(RaidPlugin plugin) {
		ProtocolManager manager = ProtocolLibrary.getProtocolManager();

		// Jigsaw
		manager.addPacketListener(new PacketAdapter(plugin, PacketType.Play.Client.CUSTOM_PAYLOAD) {
			@Override
			public void onPacketReceiving(PacketEvent event) {
				String channel = event.getPacket().getStrings().getValues().get(0);
				int capacity = ((ByteBuf) event.getPacket().getModifier().getValues().get(1)).capacity();

				if (BLOCKED_CHANNELS.contains(channel) && capacity > MAX_CAPACITY) {
					event.setCancelled(true);

					Player player = event.getPlayer();

					if (player == null) {
						return;
					}

					UUID uuid = player.getUniqueId();

					if (!kicked.contains(uuid)) {
						kicked.add(uuid);

						plugin.getServer().getScheduler().runTask(plugin, () -> {
							player.kickPlayer(CC.RED + "You are sending too many packets!");
							kicked.remove(uuid);
						});
					}
				}
			}
		});

		// Boxer
		manager.addPacketListener(new PacketAdapter(plugin, PacketType.Play.Client.ARM_ANIMATION) {
			@Override
			public void onPacketReceiving(PacketEvent event) {
				Player player = event.getPlayer();

				if (player == null) {
					return;
				}

				UUID uuid = player.getUniqueId();
				int pps = packetsPerSecond.getOrDefault(uuid, 0);

				if (pps > 1000 && !kicked.contains(uuid)) {
					event.setCancelled(true);
					kicked.add(uuid);

					plugin.getServer().getScheduler().runTask(plugin, () -> {
						player.kickPlayer(CC.RED + "You are sending too many packets!");
						kicked.remove(uuid);
					});
				}

				packetsPerSecond.put(uuid, pps + 1);
			}
		});

		plugin.getServer().getScheduler().runTaskTimer(plugin, packetsPerSecond::clear, 20L, 20L);
	}
}
